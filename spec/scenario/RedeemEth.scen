-- Redeem Tests

Test "Mint then Redeem All"
    NewComptroller
    ListedEtherToken aBNB initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 aBNB
    -- Check current affairs
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 10e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0.005e18
    Invariant Static (AToken aBNB ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (EtherBalance Geoff) +0.005e18
    RedeemEth Geoff 10e8 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) Zero
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) Zero

Test "Mint then Redeem Part"
    NewComptroller
    ListedEtherToken aBNB initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 aBNB
    -- Check current affairs
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 10e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0.005e18
    Invariant Static (AToken aBNB ExchangeRateStored)
    -- Now redeem after some time
    FastForward 2 Blocks
    Expect Changes (EtherBalance Geoff) +0.001e18
    RedeemEth Geoff 2e8 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 8e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0.004e18

Test "Mint then Redeem Too Much"
    NewComptroller
    ListedEtherToken aBNB initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 aBNB
    AllowFailures
    -- Check and hold static
    Invariant Static (AToken aBNB ExchangeRateStored)
    Invariant Remains (Bep20 aBNB TokenBalance Geoff) 10e8
    Invariant Static (EtherBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemEth Geoff 11e8 aBNB
    -- TODO: This should really be REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED, but based on
    -- the order of subtractions, total supply comes before account supply.
    Assert Failure MATH_ERROR REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED "3" -- TODO: This error is wrong

Test "Mint then Redeem Zero"
    NewComptroller
    ListedEtherToken aBNB initialExchangeRate:0.005e9
    CallMintEth Geoff 0.005e18 aBNB
    -- Check and hold static
    Invariant Static (AToken aBNB ExchangeRateStored)
    Invariant Remains (Bep20 aBNB TokenBalance Geoff) 10e8
    Invariant Static (EtherBalance Geoff)
    -- Now redeem after some time
    FastForward 2 Blocks
    RedeemEth Geoff 0e9 aBNB

Pending "Mint then redeem with interest - no reserves"
    Invariant Success
    NewComptroller
    ListedAToken ZRX aBNB initialExchangeRate:1e9
    Invariant Remains (AToken aBNB Reserves) Zero
    Prep Geoff 50e18 ZRX aBNB
    Mint Geoff 50e18 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aBNB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aBNB 10e18 5e18 interestRate:0.0001 blocks:5000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 55e18
    Assert Equal (AToken aBNB ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 aBNB
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 55e18
    Assert Equal (Bep20 ZRX TokenBalance aBNB) 0e18
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 0e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0e18
    Assert Equal (AToken aBNB ExchangeRate) 1e9

Pending "Mint then redeem part with interest - no reserves"
    Invariant Success
    NewComptroller
    ListedAToken ZRX aBNB initialExchangeRate:1e9
    Invariant Remains (AToken aBNB Reserves) Zero
    Prep Geoff 50e18 ZRX aBNB
    Mint Geoff 50e18 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aBNB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aBNB 10e18 5e18 interestRate:0.0001 blocks:5000
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   This is due pro-rata to all holders, but we just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 55e18
    Assert Equal (AToken aBNB ExchangeRate) 1.1e9
    -- Now redeem all with interest
    Redeem Geoff 499e8 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 1e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0.11e18
    Assert Equal (AToken aBNB ExchangeRate) 1.1e9

Pending "Mint then redeem with reserves and interest"
    Invariant Success
    NewComptroller
    ListedAToken ZRX aBNB initialExchangeRate:1e9
    Prep Geoff 50e18 ZRX aBNB
    Mint Geoff 50e18 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 50e18
    Assert Equal (AToken aBNB ExchangeRate) 1e9
    -- Get some brah to borrow then repay
    BorrowAndRepayWithInterest ZRX aBNB 10e18 5e18 interestRate:0.0001 blocks:5000 reserveRate:0.2
    -- We've accrued 10% interest for 5 blocks, or 50% of the amount,
    --   thus, we should have accrued 5e18 of interest for the protocol
    --   The reserves should get 20% of this, or 1e18, and the rest
    --   is due pro-rata to all holders. We just have one, so
    --   let's check that account is given correct new balance.
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 500e8
    Assert Equal (AToken aBNB Reserves) 1e18
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 54e18
    -- 55e18 + 0e18 - 1e18 / 500
    Assert Equal (AToken aBNB ExchangeRate) 1.08e9
    -- Now redeem all with interest
    Redeem Geoff 500e8 aBNB
    Assert Equal (Bep20 ZRX TokenBalance Geoff) 54e18
    Assert Equal (Bep20 ZRX TokenBalance aBNB) 1e18
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 0e8
    Assert Equal (AToken aBNB Reserves) 1e18
    Assert Equal (AToken aBNB UnderlyingBalance Geoff) 0e18
    Assert Equal (AToken aBNB ExchangeRate) 1e9

Test "Two users Mint, one redeems"
    NewComptroller
    ListedEtherToken aBNB initialExchangeRate:0.005e9
    CallMintEth Geoff 0.002e18 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 4e8
    Assert Equal (Bep20 aBNB TotalSupply) 4e8
    CallMintEth Torrey 0.004e18 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 4e8
    Assert Equal (Bep20 aBNB TokenBalance Torrey) 8e8
    Assert Equal (Bep20 aBNB TotalSupply) 12e8
    RedeemEth Torrey 3e8 aBNB
    Assert Equal (Bep20 aBNB TokenBalance Geoff) 4e8
    Assert Equal (Bep20 aBNB TokenBalance Torrey) 5e8
    Assert Equal (Bep20 aBNB TotalSupply) 9e8
